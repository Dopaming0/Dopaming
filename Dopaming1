

1.6.2 switch 문
enum Status{
  approved,
  pending,
  rejected
}

void main(){
  Status status = Status.approved;
  
  switch (status){
    case Status.approved:
      print('승인 상태입니다.');
      break;
    case Status.pending:
      print('대기 상태입니다.');
      
      break;
    case Status.rejected:
      print('거절 상태입니다.');
      break;
    default:
      print('알 수 없는 상태입니다.');
  }
  print(Status.values);
}

1.6.3 for 문

void main() {
  //for loop
 int total = 0;
  
  List<int> numbers = [1, 2, 3, 4, 5, 6];
  
  for(int i = 0; i < numbers.length; i++){
    total += numbers[i];
  }
  
  print(total);
  
  total = 0;
  
  for(int number in numbers){
   total += number;
  }
  print(total);
}

1.6.4 while문과 do...while문
void main(){
  //while loop
  
  int total = 0;
  
  while (total < 10){
    total += 1;
  } 
  
  print(total);
}

void main() {
  //while loop

  int total = 0;

  while (total < 10) {
    total += 1;

    if (total == 5) {
      break; //break는 중단, continue는 5만 제외하고 계속
    }
  }
  print(total);
}
※error사 할 거 같 다.
1.7 함수와 람다

void main(){
  addNumbers(y: 20, x: 10);
  
  addNumbers(x: 10, y: 30, z:40);
  
  
}

addNumbers({
  required int x,
  required int y,
  int z = 30,
}) {
  int sum = x + y + z;
  
  print('x : $x');
  print('y : $y');
  print('z : $z');
  
  if(sum % 2 == 0){
    print('짝수입니다.');
    
  }else{
    print('홀수입니다.');
  }
}
1.7.1 일반적인 함수의 특징
// 순서가 고정된 매개변수
int addTwoNumbers(int a, int b) {
  return a + b;  
  }

void main() {
  print(addTwoNumbers(1, 2));
}

// 이름이 있는 매개변수
int addTwoNumbers({
  required int a,
  required int b,
}) {
  return a + b;
}

void main(){
  print(addTwoNumbers(a: 1, b: 2));
}

//기본값 설정
int addTwoNumbers(int a, [int b = 2]) {
  return a+b;
}

void main(){
  print(addTwoNumbers(1));
}

//포지셔널 파라미터와 네임드 파라미터 믹스
int addTwoNumbers(
int a, {
  required int b,
  int c = 4,
}) {
  return a + b + c;
}

1.7.2 익명 함수와 람다 함수
void main() {
  print(addTwoNumbers(1, b: 3, c: 7));
}

void main(){
  List<int> numbers = [1, 2, 3, 4, 5];
  
  //일반 함수로 모든 값 더하기
  final allMembers = numbers.reduce((value, element){
    return value + element;
});

print(allMembers);
}

void main() {
  List<int> numbers = [1, 2, 3, 4, 5];
  
  //람다 함수로 모든 값 더하기
  final allMembers = numbers.reduce((value, element) => value + element);
  
  print(allMembers);
  }
  
  1.7.3 typedef와 함수
  typedef Operation = void Function(int x, int y);

void add(int x, int y){
  print('결괏값 : ${x + y}');
  
}

void subtract(int x, int y) {
  print('결괏값 : ${x - y}');
  
}

void main(){
  // typedef는 일반적인 변수의 type처럼 사용 가능
  Operation oper = add;
  oper(1, 2);
  
  //subtract() 함수도 Operation에 해당되는
  //시그니처이므로 oper 변수에 저장 가능
  oper = subtract;
  oper(1,2);
  }
  
1.7.3 typedef와 함수
void main(){
  Operation operation = add;
  
  int result = operation(10, 20, 30);
  
  print(result);
  
  operation = subtract;
  
  int result2 = operation(10,20,30);
  
  print(result2);
  
  int result3 = calculation(30, 40, 50, add);
  
  print(result3);
  
  int result4 = calculation(40,50,60, subtract);
  
  print(result4);
}

typedef Operation = int Function(int x, int y, int z);

int add(int x, int y, int z) => x + y + z;
int subtract(int x, int y, int z) => x - y- z;
int calculation(int x, int y, int z, Operation operation){
  return operation(x, y, z);
}
※
typedef Operation = void Function(int x, int y);

void add(int x, int y){
  print('결괏값 : ${x + y}');
}

void calculate(int x, int y, Operation oper) {
  oper(x, y);
}

void main(){
  calculate(1, 2, add);
}


